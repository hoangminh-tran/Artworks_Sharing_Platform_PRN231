// <auto-generated />
using System;
using Artworks_Sharing_Plaform_Api.AppDatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Artworks_Sharing_Plaform_Api.Migrations
{
    [DbContext(typeof(ArtworksSharingPlaformDatabaseContext))]
    [Migration("20240309034550_v1.5")]
    partial class v15
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Balance");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Account", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Artwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Price");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Artwork", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.ArtworkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtworkId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("TypeOfArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeOfArtworkId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("TypeOfArtworkId");

                    b.ToTable("ArtworkType", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.BookingArtwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtworkId");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid?>("RequestArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestArtworkId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("BookingId");

                    b.HasIndex("RequestArtworkId");

                    b.ToTable("BookingArtwork", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.BookingArtworkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("TypeOfArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TypeOfArtworkId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("TypeOfArtworkId");

                    b.ToTable("BookingArtworkType", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid?>("ArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtworkId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Complant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountComplantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountComplantId");

                    b.Property<Guid?>("ArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtworkId");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CommentId");

                    b.Property<string>("ComplantContent")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ComplantContent");

                    b.Property<string>("ComplantType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ComplantType");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("ManageIssuseAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ManageIssuseAccountId");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<Guid?>("SharingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SharingId");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountComplantId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ManageIssuseAccountId");

                    b.HasIndex("PostId");

                    b.HasIndex("SharingId");

                    b.HasIndex("StatusId");

                    b.ToTable("Complant", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.LikeBy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<Guid?>("ArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtworkId");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CommentId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("LikeBy", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Payment");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("Order", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.PaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ContentPost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContentPost");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Post", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.PostArtwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtworkId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("PostId");

                    b.ToTable("PostArtwork", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.PreOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("StatusId");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.RequestArtwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Description");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("StatusId");

                    b.ToTable("RequestArtwork", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("Role", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Sharing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostId");

                    b.ToTable("Sharing", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("StatusName");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.ToTable("Status", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.TypeOfArtwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StatusId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeDescription");

                    b.Property<byte[]>("TypeImageDeafault")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ArtworkTypeImageDeafault");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TypeOfArtwork", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.UserFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDateTime");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeleteDateTime");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FollowingId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDateTime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FollowingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollow", "dbo");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Account", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("Accounts")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Artwork", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Creator")
                        .WithMany("CreatorArtwork")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Order", "Order")
                        .WithMany("Artworks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("Artworks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Order");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.ArtworkType", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("ArtworkType")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.TypeOfArtwork", "TypeOfArtwork")
                        .WithMany("ArtworkTypes")
                        .HasForeignKey("TypeOfArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("TypeOfArtwork");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Booking", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Creator")
                        .WithMany("CreatorBooking")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("Bookings")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "User")
                        .WithMany("UserBooking")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.BookingArtwork", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("ArtworkBooking")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Booking", "Booking")
                        .WithMany("BookingArtworks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.RequestArtwork", "RequestArtwork")
                        .WithMany("BookingArtworks")
                        .HasForeignKey("RequestArtworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Artwork");

                    b.Navigation("Booking");

                    b.Navigation("RequestArtwork");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.BookingArtworkType", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Booking", "Booking")
                        .WithMany("BookingArtworkTypes")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.TypeOfArtwork", "TypeOfArtwork")
                        .WithMany("BookingArtworkTypes")
                        .HasForeignKey("TypeOfArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TypeOfArtwork");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Comment", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Account")
                        .WithMany("AccountComment")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("Comment")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Artwork");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Complant", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "AccountComplant")
                        .WithMany("AccountComplant")
                        .HasForeignKey("AccountComplantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("Complant")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Comment", "Comment")
                        .WithMany("Complants")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "ManageIssuseAccount")
                        .WithMany("ManageIssuseAccount")
                        .HasForeignKey("ManageIssuseAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Post", "Post")
                        .WithMany("Complants")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Sharing", "Sharing")
                        .WithMany("Complants")
                        .HasForeignKey("SharingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("Complants")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountComplant");

                    b.Navigation("Artwork");

                    b.Navigation("Comment");

                    b.Navigation("ManageIssuseAccount");

                    b.Navigation("Post");

                    b.Navigation("Sharing");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.LikeBy", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Account")
                        .WithMany("AccountLikeBy")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("LikeBy")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Comment", "Comment")
                        .WithMany("LikeBys")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Post", "Post")
                        .WithMany("LikeBys")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Artwork");

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Order", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Account")
                        .WithMany("AccountOrder")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.PaymentHistory", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Account")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Post", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Creator")
                        .WithMany("CreatorPost")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.PostArtwork", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("PostArtworks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Post", "Post")
                        .WithMany("PostArtworks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.PreOrder", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Account")
                        .WithMany("PreOrders")
                        .HasForeignKey("AccountId");

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Artwork", "Artwork")
                        .WithMany("PreOrders")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("PreOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Artwork");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.RequestArtwork", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Booking", "Booking")
                        .WithMany("RequestArtworks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany("RequestArtworks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Sharing", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Account")
                        .WithMany("UserSharing")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Post", "Post")
                        .WithMany("Sharings")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.TypeOfArtwork", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.UserFollow", b =>
                {
                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "Following")
                        .WithMany("UserFollowing")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Artworks_Sharing_Plaform_Api.Model.Account", "User")
                        .WithMany("UserFollow")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Following");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Account", b =>
                {
                    b.Navigation("AccountComment");

                    b.Navigation("AccountComplant");

                    b.Navigation("AccountLikeBy");

                    b.Navigation("AccountOrder");

                    b.Navigation("CreatorArtwork");

                    b.Navigation("CreatorBooking");

                    b.Navigation("CreatorPost");

                    b.Navigation("ManageIssuseAccount");

                    b.Navigation("PaymentHistories");

                    b.Navigation("PreOrders");

                    b.Navigation("UserBooking");

                    b.Navigation("UserFollow");

                    b.Navigation("UserFollowing");

                    b.Navigation("UserSharing");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Artwork", b =>
                {
                    b.Navigation("ArtworkBooking");

                    b.Navigation("ArtworkType");

                    b.Navigation("Comment");

                    b.Navigation("Complant");

                    b.Navigation("LikeBy");

                    b.Navigation("PostArtworks");

                    b.Navigation("PreOrders");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Booking", b =>
                {
                    b.Navigation("BookingArtworkTypes");

                    b.Navigation("BookingArtworks");

                    b.Navigation("RequestArtworks");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Comment", b =>
                {
                    b.Navigation("Complants");

                    b.Navigation("LikeBys");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Order", b =>
                {
                    b.Navigation("Artworks");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Complants");

                    b.Navigation("LikeBys");

                    b.Navigation("PostArtworks");

                    b.Navigation("Sharings");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.RequestArtwork", b =>
                {
                    b.Navigation("BookingArtworks");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Sharing", b =>
                {
                    b.Navigation("Complants");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.Status", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Artworks");

                    b.Navigation("Bookings");

                    b.Navigation("Complants");

                    b.Navigation("Orders");

                    b.Navigation("PaymentHistories");

                    b.Navigation("PreOrders");

                    b.Navigation("RequestArtworks");
                });

            modelBuilder.Entity("Artworks_Sharing_Plaform_Api.Model.TypeOfArtwork", b =>
                {
                    b.Navigation("ArtworkTypes");

                    b.Navigation("BookingArtworkTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
